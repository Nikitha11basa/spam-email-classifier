# -*- coding: utf-8 -*-
"""Copy of spam and ham classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vkEHEqpR6O2Q44MJsSFlvimTnat6vVtq
"""

#this program is to check whether a email is spam or ham

#import libraries
import numpy as np
import pandas as pd
import nltk
from nltk.corpus import stopwords
import string

from google.colab import files
uploaded = files.upload()

#read the csv file
df=pd.read_csv('spam_ham_dataset.csv.zip')
#to read first 5 lines
df.head(20)

#print the shape
df.shape

#to get bnames of columns
df.columns

#check for duplicates and remove them
df.drop_duplicates(inplace=True)

#check the shape after removing duplicates
df.shape

#show number of missing data
df.isnull().sum()

#download stopworrd package
nltk.download('stopwords')

def process_text(text):
  #1 remove puntuation
  #2 remopve stopwords
  #3 return list of clean text words
  #1
  nopunc = [char for char in text if char not in string.punctuation]
  nopunc = ''.join(nopunc)
  #2
  clean_words=[word for word in nopunc.split() if word.lower() not in stopwords.words('english')]
  #3
  return clean_words

#show the tokenisation (a list of toens also called lemmas)
df['text'].head().apply(process_text)

#example
message4 = 'hello world hello hello world play'
message5 = 'test test test test one hello'
print(message4)
print()

#convert the text to a matrix
from sklearn.feature_extraction.text import CountVectorizer
bow4 = CountVectorizer(analyzer=process_text).fit_transform([[message4],[message5]])
print(bow4)
print(bow4.shape)
#here 5 represents  unique words and 2 represents the no. of messages

#convert a collection of text to a matrix of tokens
from sklearn.feature_extraction.text import CountVectorizer
message_bow=CountVectorizer(analyzer=process_text).fit_transform(df['text'])

#split data into 80% training and 20% testing
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test= train_test_split(message_bow,df['label_num'], test_size=0.20,random_state=0)

#get the shape of message_bow
message_bow.shape
#it has 5171 rows and 50381 colums

#create and train the Naive bayes classifier
from sklearn.naive_bayes import MultinomialNB
classifier =  MultinomialNB().fit(x_train, y_train)

#print the predictions
print(classifier.predict(x_train))
#prints the text values of first 3 rows and last 3 rows

#print actual values
print(y_train.values)
print(y_train)

#evaluate the model on the trainingf data set
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score
pred = classifier.predict(x_train)
print(classification_report(y_train,pred))
print()
print('confusion matrix:\n ',confusion_matrix(y_train,pred))
print()
print("accuracy=",accuracy_score(y_train,pred))

print(classifier.predict(x_test))

#print actual values
print(y_test.values)

#evaluate the model on the trainingf data set
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score
pred = classifier.predict(x_test)
print(classification_report(y_test,pred))
print()
print('confusion matrix:\n ',confusion_matrix(y_test,pred))
print()
print("accuracy=",accuracy_score(y_test,pred))

